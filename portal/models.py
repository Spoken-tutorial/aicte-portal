from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class State(models.Model):
    code = models.CharField(max_length=2)
    name = models.CharField(max_length=50)

    def __unicode__(self):
        return self.name

    class Meta:
        unique_together = (("code","name"),)

class District(models.Model):
    state = models.ForeignKey(State)
    code = models.CharField(max_length=3)
    name = models.CharField(max_length=200)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    def __unicode__(self):
        return self.name

    class Meta:
        unique_together = (("state", "code","name"),)

class City(models.Model):
    state = models.ForeignKey(State)
    name = models.CharField(max_length=200)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    def __unicode__(self):
        return self.name

    class Meta:
        unique_together = (("name","state"),)

class Location(models.Model):
    district = models.ForeignKey(District)
    name = models.CharField(max_length=200)
    pincode = models.PositiveIntegerField()
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    def __unicode__(self):
        return self.name

    class Meta:
        unique_together = (("name","district","pincode"),)

class InstitutionType(models.Model):
    type = models.CharField(max_length = 255, unique = True)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    def __unicode__(self):
        return self.type

class InstitutionDetail(models.Model):
    institution_name = models.CharField(max_length = 255)
    institution_address = models.TextField()
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City, null = True)
    first_course_year = models.IntegerField(max_length=4)
    institution_type = models.ForeignKey(InstitutionType)
    unaided_courses = models.BooleanField()
    women_institute = models.BooleanField()
    co_ed = models.BooleanField()
    std_code = models.IntegerField(max_length = 15)
    land_phone = models.CharField(max_length = 15)
    cell_phone = models.CharField(max_length = 15)
    fax_number = models.CharField(max_length = 30, null = True)
    primary_email = models.EmailField(max_length = 255)
    secondary_email = models.EmailField(max_length = 255, null = True)
    website = models.URLField(max_length = 255, null = True)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    #class Meta:
    #    unique_together = (('institution_name', 'state','district','location', 'city', 'institution_type', 'unaided_courses', 'women_institute', 'co_ed',),)

class OrganisationType(models.Model):
    name = models.CharField(max_length = 100)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    def __unicode__(self):
        return self.name
 
class Organisation(models.Model):
    name = models.CharField(max_length = 200)
    organisation_type = models.ForeignKey(OrganisationType)
    registered_with = models.CharField(max_length = 200)
    registered_date = models.DateField()
    registered_number = models.CharField(max_length = 100)
    address = models.TextField()
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City, null = True)
    std_code = models.CharField(max_length = 15)
    land_phone = models.CharField(max_length = 15)
    cell_phone = models.CharField(max_length = 15)
    fax_number = models.CharField(max_length = 30, null = True)
    website = models.URLField(max_length = 255, null = True)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    #class Meta:
    #    unique_together = (('name', 'organisation_type', 'state', 'district', 'location', 'city',))

class Trustee(models.Model):
    organisation = models.ForeignKey(Organisation)
    title = models.CharField(max_length = 200)
    first_name = models.CharField(max_length = 200)
    middle_name = models.CharField(max_length = 200, null = True)
    last_name = models.CharField(max_length = 200)
    designation = models.CharField(max_length = 200)
    dob = models.DateField()
    trustee_since = models.DateField()
    trustee_till = models.DateField(null = True)
    email = models.EmailField(max_length = 255)
    pan = models.CharField(max_length = 200)
    profession = models.CharField(max_length = 200)
    academic_qualification = models.CharField(max_length = 200)
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City, null = True)
    address1 = models.CharField(max_length = 255)
    address2 = models.CharField(max_length = 255, null = True)
    std_code = models.CharField(max_length = 15)
    land_phone = models.CharField(max_length = 15)
    cell_phone = models.CharField(max_length = 15)

class ContactDetail(models.Model):
    title = models.CharField(max_length = 10)
    first_name = models.CharField(max_length = 255)
    last_name = models.CharField(max_length = 255)
    address = models.TextField()
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City, null = True)
    designation = models.CharField(max_length = 255)
    std_code = models.CharField(max_length = 15)
    land_phone = models.CharField(max_length = 15)
    cell_phone = models.CharField(max_length = 15)
    alt_cell_phone = models.CharField(max_length = 15, null = True)
    fax_number = models.CharField(max_length = 30, null = True)
    email = models.EmailField(max_length = 255)
    alt_email = models.EmailField(max_length = 255, null = True)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    #class Meta:
    #    unique_together = (('first_name', 'last_name', 'state', 'district', 'location', 'city', 'designation'))

class LandDetail(models.Model):
    location = models.PositiveSmallIntegerField()
    total_area_acres = models.DecimalField(max_digits = 8, decimal_places = 2)
    land_reg_with = models.CharField(max_length = 255)
    date_of_reg = models.DateField()
    north_hilly_area = models.BooleanField()
    no_of_pieces = models.IntegerField()
    max_distance = models.DecimalField(max_digits = 8, decimal_places = 2)
    land_cert_issued_by = models.CharField(max_length = 255)
    land_cert_issued_date = models.DateField()
    ownership_details = models.PositiveSmallIntegerField()
    land_mordgaged = models.BooleanField()
    latitude_ns = models.PositiveSmallIntegerField(null = True)
    latitude_degree = models.IntegerField(null = True)
    latitude_minute = models.IntegerField(null = True)
    latitude_second = models.IntegerField(null = True)
    longitude_ew = models.PositiveSmallIntegerField(null = True)
    longitude_degree = models.IntegerField(null = True)
    longitude_minute = models.IntegerField(null = True)
    longitude_second = models.IntegerField(null = True)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

    #class Meta:
    #    unique_together = (('location', 'total_area_acres', 'land_reg_with', 'date_of_reg', 'north_hilly_area', 'no_of_pieces', 'max_distance', 'land_cert_issued_by', 'land_cert_issued_date', 'ownership_details', 'land_mordgaged'))

class PerLandDetail(models.Model):
    land_detail = models.ForeignKey(LandDetail)
    land_reg_no = models.CharField(max_length = 255)
    date_of_reg = models.DateField()
    area_of_land = models.DecimalField(max_digits = 8, decimal_places = 2)
    khasra_number = models.CharField(max_length = 255)
    plot_survey_no = models.CharField(max_length = 255)
    land_situated = models.CharField(max_length = 255)
    land_reg_name = models.CharField(max_length = 255)
    owner_govt_lease = models.PositiveSmallIntegerField()
    land_cert_issued = models.BooleanField()
    land_cert_authority = models.CharField(max_length = 255, null = True)
    is_mortgaged = models.BooleanField()
    bank_mortgaged = models.CharField(max_length = 255, null = True)
    land_required = models.DecimalField(max_digits = 8, decimal_places = 2)
    land_available = models.DecimalField(max_digits = 8, decimal_places = 2)

class BuildingDetail(models.Model):
    building_status = models.PositiveSmallIntegerField()
    built_area_planned = models.CharField(max_length = 255)
    built_area_ready = models.CharField(max_length = 255)
    carpet_area_instructional = models.CharField(max_length = 255)
    carpet_area_admin = models.CharField(max_length = 255)
    carpet_area_amenities = models.CharField(max_length = 255)
    funds_allocated = models.DecimalField(max_digits = 10, decimal_places = 2)
    loans = models.DecimalField(max_digits = 10, decimal_places = 2)
    own_share = models.DecimalField(max_digits = 10, decimal_places = 2)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

class PerBuildingDetail(models.Model):
    building_detail = models.ForeignKey(BuildingDetail)
    building_name = models.CharField(max_length = 255)
    building_number = models.CharField(max_length = 255)
    sanct_build_area = models.CharField(max_length = 255)
    const_build_area = models.CharField(max_length = 255)
    approved_carpet_area_inst = models.CharField(max_length = 255)
    const_carpet_area_inst = models.CharField(max_length = 255)
    approved_carpet_area_admin = models.CharField(max_length = 255)
    const_carpet_area_admin = models.CharField(max_length = 255)
    approved_carpet_area_amen = models.CharField(max_length = 255)
    const_carpet_area_amen = models.CharField(max_length = 255)
    total_area_approved = models.CharField(max_length = 255)
    total_area_constructed = models.CharField(max_length = 255)
    activities_conducted = models.CharField(max_length = 255)
    non_aicte_courses = models.CharField(max_length = 255)
    approving_authority = models.CharField(max_length = 255)
    approval_date = models.DateField()
    approval_number = models.CharField(max_length = 255)

    def __unicode__(self):
        return self.building_name

class FacultyDetail(models.Model):
    application_year = models.ForeignKey('ApplicationYear')
    title = models.CharField(max_length = 10)
    first_name = models.CharField(max_length = 255)
    middel_name = models.CharField(max_length = 255)
    last_name = models.CharField(max_length = 255)
    gender = models.CharField(max_length = 10)
    father_name = models.CharField(max_length = 255)
    mother_name = models.CharField(max_length = 255)
    date_of_birth = models.DateField()
    current_age = models.IntegerField()
    address1 = models.TextField()
    address2 = models.TextField()
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City)
    caste = models.PositiveSmallIntegerField()
    left_institute = models.BooleanField()
    relieved_date = models.DateField()
    pan_number = models.CharField(max_length = 255)
    std_code = models.CharField(max_length = 10)

class Application(models.Model):
    institution_number = models.CharField(max_length = 255, unique = True)
    user = models.ForeignKey(User)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)

class Department(models.Model):
    name = models.CharField(max_length = 255)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    
    def __unicode__(self):
        return self.name

class University(models.Model):
    name = models.CharField(max_length = 255)
    board_type = models.CharField(max_length = 255)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    
    def __unicode__(self):
        return self.name
    
class Level(models.Model):
    level = models.CharField(max_length = 255)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    def __unicode__(self):
        return self.level

class Course(models.Model):
    name = models.CharField(max_length = 255)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    
    def __unicode__(self):
        return self.name

class Program(models.Model):
    name = models.CharField(max_length = 255)
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    
    def __unicode__(self):
        return self.name

class ProgramDetail(models.Model):
    program = models.ForeignKey(Program)
    application_year = models.ForeignKey('ApplicationYear')
    new_existing = models.PositiveSmallIntegerField()
    instructional_area = models.ForeignKey(PerBuildingDetail)

class CourseDetail(models.Model):
    application = models.ForeignKey(Application)
    program = models.ForeignKey(Program)
    affiliating_board = models.ForeignKey(University)
    level = models.ForeignKey(Level)
    department = models.ForeignKey(Department)
    course = models.ForeignKey(Course)
    shift = models.PositiveSmallIntegerField()
    last_approved_intake = models.IntegerField()
    intake_applied_for = models.IntegerField()
    course_duration = models.DecimalField(max_digits = 10, decimal_places = 2)
    year_started = models.IntegerField()
    full_part_time = models.PositiveSmallIntegerField()
    accreditation_status = models.PositiveSmallIntegerField()
    accreditation_type = models.PositiveSmallIntegerField()
    accreditation_from = models.DateField()
    accreditation_till = models.DateField()
    accreditation_letter_date = models.DateField()
    accreditation_letter_refno = models.CharField(max_length = 255)
    nri = models.PositiveSmallIntegerField()
    pio = models.PositiveSmallIntegerField()
    annual_fees = models.DecimalField(max_digits = 10, decimal_places = 2)
    no_of_faculty = models.IntegerField()
    govt_recommendation = models.PositiveSmallIntegerField()
    board_recommendation = models.PositiveSmallIntegerField()
    course_type = models.PositiveSmallIntegerField()
    mode_of_conduct = models.PositiveSmallIntegerField()
    status = models.BooleanField()

class StudentCount(models.Model):
    application = models.ForeignKey(Application)
    academic_year = models.IntegerField()
    course_detail = models.ForeignKey(ContactDetail)
    no_of_1year = models.IntegerField()
    no_of_2year = models.IntegerField()
    no_of_3year = models.IntegerField()
    no_of_4year = models.IntegerField()
    no_of_5year = models.IntegerField()
    no_of_6year = models.IntegerField()
    no_of_7year = models.IntegerField()

class RoomType(models.Model):
    name = models.CharField(max_length = 255)
    category = models.PositiveSmallIntegerField()
    created = models.DateTimeField(auto_now_add = True)
    updated = models.DateTimeField(auto_now = True)
    def __unicode__(self):
        return self.name

class InstructionalArea(models.Model):
    application = models.ForeignKey(Application)
    course = models.ForeignKey(Course)
    level = models.ForeignKey(Level)
    room_type = models.ForeignKey(RoomType)
    room_id_name = models.CharField(max_length = 255)
    room_area_in_sqm = models.IntegerField()
    per_building_detail = models.ForeignKey(PerBuildingDetail)
    readiness_of_floor = models.PositiveSmallIntegerField()
    readiness_of_wall = models.PositiveSmallIntegerField()
    readiness_of_electric = models.PositiveSmallIntegerField()
    readiness_of_furniture = models.PositiveSmallIntegerField()
    air_conditioning = models.PositiveSmallIntegerField()

class CommonFacilities(models.Model):
    application = models.ForeignKey(Application)
    room_type = models.ForeignKey(RoomType)
    room_id_name = models.CharField(max_length = 255)
    room_area_in_sqm = models.IntegerField()
    per_building_detail = models.ForeignKey(PerBuildingDetail)
    readiness_of_floor = models.PositiveSmallIntegerField()
    readiness_of_wall = models.PositiveSmallIntegerField()
    readiness_of_electric = models.PositiveSmallIntegerField()
    readiness_of_furniture = models.PositiveSmallIntegerField()
    air_conditioning = models.PositiveSmallIntegerField()

class AdministrativeArea(models.Model):
    application = models.ForeignKey(Application)
    room_type = models.ForeignKey(RoomType)
    room_id_name = models.CharField(max_length = 255)
    room_area_in_sqm = models.IntegerField()
    per_building_detail = models.ForeignKey(PerBuildingDetail)
    readiness_of_floor = models.PositiveSmallIntegerField()
    readiness_of_wall = models.PositiveSmallIntegerField()
    readiness_of_electric = models.PositiveSmallIntegerField()
    readiness_of_furniture = models.PositiveSmallIntegerField()
    air_conditioning = models.PositiveSmallIntegerField()

class AmenitiesArea(models.Model):
    application = models.ForeignKey(Application)
    room_type = models.ForeignKey(RoomType)
    room_id_name = models.CharField(max_length = 255)
    room_area_in_sqm = models.IntegerField()
    per_building_detail = models.ForeignKey(PerBuildingDetail)
    readiness_of_floor = models.PositiveSmallIntegerField()
    readiness_of_wall = models.PositiveSmallIntegerField()
    readiness_of_electric = models.PositiveSmallIntegerField()
    readiness_of_furniture = models.PositiveSmallIntegerField()
    air_conditioning = models.PositiveSmallIntegerField()

class OtherFacilities(models.Model):
    application = models.ForeignKey(Application)
    potable_water_supply = models.BooleanField()
    electric_supply = models.BooleanField()
    website = models.BooleanField()
    notice_board = models.BooleanField()
    post_banking = models.BooleanField()
    staff_quarters = models.BooleanField()
    backup_electric = models.BooleanField()
    general_insurance = models.BooleanField()
    student_insurance = models.BooleanField()
    public_announcement = models.BooleanField()
    projector_in_class = models.BooleanField()
    telephone_fax = models.BooleanField()
    barrier_fee = models.BooleanField()
    all_weather_approach = models.BooleanField()
    group_insurance = models.BooleanField()
    medical_counseling = models.BooleanField()
    safety_provision = models.BooleanField()
    transport_facility = models.BooleanField()
    cctv_security = models.BooleanField()
    erp_software = models.BooleanField()
    first_aid = models.BooleanField()
    sewage_disposal = models.BooleanField()
    vehicle_parking = models.BooleanField()
    language_lab = models.BooleanField()

class LaboratoryDetail(models.Model):
    application = models.ForeignKey(Application)
    program = models.ForeignKey(Program)
    department = models.ForeignKey(Department)
    course = models.ForeignKey(Course)
    level = models.ForeignKey(Level)
    equipment_budget = models.IntegerField()
    consumable_budget = models.IntegerField()
    research_lab = models.BooleanField()
    lab_name = models.CharField(max_length = 255)
    lab_equipments = models.TextField()
    investment_till_date = models.IntegerField()
    per_land_detail = models.ForeignKey(PerBuildingDetail)

class LibraryBook(models.Model):
    application = models.ForeignKey(Application)
    no_of_titles = models.IntegerField()
    no_of_volumes = models.IntegerField()
    no_of_national_journals = models.IntegerField()
    no_of_international_journals = models.IntegerField()
    ejournals = models.BooleanField()

class LibraryFacility(models.Model):
    application = models.ForeignKey(Application)
    working_hours = models.CharField(max_length = 255)
    current_annual_budget = models.DecimalField(max_digits = 11, decimal_places = 2)
    total_area_sqm = models.IntegerField()
    network = models.BooleanField()
    reprographic_facility = models.BooleanField()
    multimedia_pcs = models.BooleanField()
    reading_room_seats = models.IntegerField()
    barcode_rf = models.PositiveSmallIntegerField()
    library_mgmt_software = models.BooleanField()

class ComputationFacility(models.Model):
    application = models.ForeignKey(Application)
    pcs_to_students = models.IntegerField()
    pcs_library = models.IntegerField()
    pcs_admin_office = models.IntegerField()
    pcs_faculty = models.IntegerField()
    internet_bandwidth = models.DecimalField(max_digits = 10, decimal_places = 2)
    internet_conn_ratio = models.CharField(max_length = 255)
    printers_available = models.IntegerField()
    legal_app_software = models.IntegerField()

class TechnicalStaff(models.Model):
    application = models.ForeignKey(Application)
    title = models.CharField(max_length = 10)
    first_name = models.CharField(max_length = 255)
    middle_name = models.CharField(max_length = 255)
    surname = models.CharField(max_length = 255)
    mother_name = models.CharField(max_length = 255)
    father_name = models.CharField(max_length = 255)
    address1 = models.TextField()
    address2 = models.TextField()
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City)
    res_phone = models.IntegerField()
    mobile_phone = models.IntegerField()
    date_of_birth = models.DateField()
    program = models.ForeignKey(Program)
    course = models.ForeignKey(Course)
    department = models.ForeignKey(Department)
    level = models.ForeignKey(Level)
    phd = models.CharField(max_length = 255)
    master_degree = models.CharField(max_length = 255)
    bachelor_degree = models.CharField(max_length = 255)
    diploma = models.CharField(max_length = 255)
    other = models.CharField(max_length = 255)
    designation = models.CharField(max_length = 255)
    appointment_type = models.PositiveSmallIntegerField()
    date_of_join = models.DateField()
    position = models.CharField(max_length = 255)
    pf_number = models.CharField(max_length = 255)
    salary_type = models.CharField(max_length = 255)
    salary_mode = models.PositiveSmallIntegerField()
    gross_pay_month = models.DecimalField(max_digits = 10, decimal_places = 2)
    bank_name = models.CharField(max_length = 255)
    bank_account_no = models.CharField(max_length = 255)
    ifsc_code = models.CharField(max_length = 255)
    pan_number = models.CharField(max_length = 255)
    left_institute = models.BooleanField()

class JfdrDetail(models.Model):
    application = models.ForeignKey(Application)
    bank_name = models.CharField(max_length = 255)
    branch = models.CharField(max_length = 255)
    fdr_created = models.DateField()
    fdr_amount = models.DecimalField(max_digits = 11, decimal_places = 2)
    fdr_maturity_date = models.DateField()
    whether_encashed = models.BooleanField()
    date_encashed = models.DateField()

class FinancialDetail(models.Model):
    application = models.ForeignKey(Application)
    income_central = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_state = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_student = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_donation = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_ugc = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_other_bodies = models.DecimalField(max_digits = 11, decimal_places = 2)
    income_revenue = models.DecimalField(max_digits = 11, decimal_places = 2)
    total_income = models.DecimalField(max_digits = 11, decimal_places = 2)
    salary_tech_staff = models.DecimalField(max_digits = 11, decimal_places = 2)
    remuneration_guest = models.DecimalField(max_digits = 11, decimal_places = 2)
    salary_nontech_staff = models.DecimalField(max_digits = 11, decimal_places = 2)
    library = models.DecimalField(max_digits = 11, decimal_places = 2)
    equipment = models.DecimalField(max_digits = 11, decimal_places = 2)
    building_mgmt = models.DecimalField(max_digits = 11, decimal_places = 2)
    other_expense = models.DecimalField(max_digits = 11, decimal_places = 2)
    total_expense = models.DecimalField(max_digits = 11, decimal_places = 2)
    surplus_deficit = models.DecimalField(max_digits = 11, decimal_places = 2)

class CirculationArea(models.Model):
    application = models.ForeignKey(Application)
    area_type = models.PositiveSmallIntegerField()
    carpet_area = models.IntegerField()
    flooring = models.BooleanField()
    painting = models.BooleanField()
    sanitary = models.BooleanField()
    electric_light = models.BooleanField()
    furniture = models.BooleanField()
    per_building_detail = models.ForeignKey(PerBuildingDetail)

class OperationalFund(models.Model):
    application = models.ForeignKey(Application)
    bank_name = models.CharField(max_length = 255)
    account_no = models.CharField(max_length = 255)
    cash_balance = models.DecimalField(max_digits = 11, decimal_places = 2)
    bank_statement_date = models.DateField()

class AdminLibraryStaff(models.Model):
    application = models.ForeignKey(Application)
    title = models.CharField(max_length = 10)
    first_name = models.CharField(max_length = 255)
    middle_name = models.CharField(max_length = 255)
    surname = models.CharField(max_length = 255)
    mother_name = models.CharField(max_length = 255)
    father_name = models.CharField(max_length = 255)
    address1 = models.TextField()
    address2 = models.TextField()
    designation = models.CharField(max_length = 255)
    date_of_join = models.DateField()
    date_of_birth = models.DateField()
    gender = models.CharField(max_length = 255)
    state = models.ForeignKey(State)
    district = models.ForeignKey(District)
    location = models.ForeignKey(Location)
    city = models.ForeignKey(City)
    res_phone = models.IntegerField()
    mobile_phone = models.IntegerField()
    phd = models.CharField(max_length = 255)
    master_degree = models.CharField(max_length = 255)
    bachelor_degree = models.CharField(max_length = 255)
    diploma = models.CharField(max_length = 255)
    other = models.CharField(max_length = 255)
    designation = models.CharField(max_length = 255)
    appointment_type = models.PositiveSmallIntegerField()
    date_of_join = models.DateField()
    position = models.CharField(max_length = 255)
    pf_number = models.CharField(max_length = 255)
    salary_type = models.CharField(max_length = 255)
    salary_mode = models.PositiveSmallIntegerField()
    gross_pay_month = models.DecimalField(max_digits = 10, decimal_places = 2)
    bank_name = models.CharField(max_length = 255)
    bank_account_no = models.CharField(max_length = 255)
    ifsc_code = models.CharField(max_length = 255)
    pan_number = models.CharField(max_length = 255)
    left_institute = models.BooleanField()

class FeeStructure(models.Model):
    application = models.ForeignKey(Application)
    program = models.ForeignKey(Program)
    course = models.ForeignKey(Course)
    level = models.ForeignKey(Level)
    admission_quota = models.PositiveSmallIntegerField()
    tuition_fee = models.DecimalField(max_digits = 11, decimal_places = 2)
    other_fee = models.DecimalField(max_digits = 11, decimal_places = 2)
    total_fee = models.DecimalField(max_digits = 11, decimal_places = 2)
    approving_body = models.CharField(max_length = 255)
    approval_date = models.DateField()

class HostelFacilities(models.Model):
    application = models.ForeignKey(Application)
    accomodation_b1 = models.IntegerField()
    room_area_in_sqm_b1 = models.IntegerField()
    per_building_detail_b1 = models.ForeignKey(PerBuildingDetail, related_name = 'b1', null = True)
    accomodation_b2 = models.IntegerField()
    room_area_in_sqm_b2 = models.IntegerField()
    per_building_detail_b2 = models.ForeignKey(PerBuildingDetail, related_name = 'b2', null = True)
    accomodation_b3 = models.IntegerField()
    room_area_in_sqm_b3 = models.IntegerField()
    per_building_detail_b3 = models.ForeignKey(PerBuildingDetail, related_name = 'b3', null = True)
    accomodation_b4 = models.IntegerField()
    room_area_in_sqm_b4 = models.IntegerField()
    per_building_detail_b4 = models.ForeignKey(PerBuildingDetail, related_name = 'b4', null = True)
    accomodation_g1 = models.IntegerField()
    room_area_in_sqm_g1 = models.IntegerField()
    per_building_detail_g1 = models.ForeignKey(PerBuildingDetail, related_name = 'g1', null = True)
    accomodation_g2 = models.IntegerField()
    room_area_in_sqm_g2 = models.IntegerField()
    per_building_detail_g2 = models.ForeignKey(PerBuildingDetail, related_name = 'g2', null = True)
    accomodation_g3 = models.IntegerField()
    room_area_in_sqm_g3 = models.IntegerField()
    per_building_detail_g3 = models.ForeignKey(PerBuildingDetail, related_name = 'g3', null = True)
    accomodation_g4 = models.IntegerField()
    room_area_in_sqm_g4 = models.IntegerField()
    per_building_detail_g4 = models.ForeignKey(PerBuildingDetail, related_name = 'g4', null = True)
    backup_electric = models.BooleanField()
    electric_supply = models.BooleanField()

class AntiRagging(models.Model):
    application = models.ForeignKey(Application)
    committee = models.BooleanField()
    squad = models.BooleanField()
    affidavit_from_student = models.BooleanField()
    appointment_of_counselor = models.BooleanField()
    affidavit_from_parent = models.BooleanField()
    affidavit_from_student_hostel = models.PositiveSmallIntegerField()
    affidavit_from_parent_hostel = models.PositiveSmallIntegerField()

class AntiRaggingDetail(models.Model):
    antiragging = models.ForeignKey(AntiRagging)
    committee_type = models.PositiveSmallIntegerField()
    appointment_order_number = models.CharField(max_length = 255)
    date_of_appointment = models.DateField()
    name_of_member = models.CharField(max_length = 255)
    profession = models.CharField(max_length = 255)
    address = models.TextField()
    associated_with = models.CharField(max_length = 255)
    mobile_number = models.IntegerField()
    email = models.EmailField(max_length = 255)
    fax_number = models.IntegerField()

class HeadOfInstitute(models.Model):
    application = models.ForeignKey(Application)
    surname = models.CharField(max_length = 255)
    first_name = models.CharField(max_length = 255)
    father_name = models.CharField(max_length = 255)
    mother_name = models.CharField(max_length = 255)
    date_of_birth = models.DateField()
    mobile_number = models.IntegerField()
    std_code = models.IntegerField()
    land_phone = models.IntegerField()
    fax_number = models.IntegerField()
    email = models.EmailField(max_length = 255)
    pan_number = models.CharField(max_length = 255)
    doctorate_degree = models.CharField(max_length = 255)
    master_degree = models.CharField(max_length = 255)
    bachelor_degree = models.CharField(max_length = 255)
    other_qualification = models.CharField(max_length = 255)
    international_certificate = models.CharField(max_length = 255)
    specialization = models.CharField(max_length = 255)
    date_of_join = models.DateField()
    appointment_type = models.PositiveSmallIntegerField()
    designation = models.CharField(max_length = 255)
    teaching_experience = models.DecimalField(max_digits = 10, decimal_places = 1)
    research_experience = models.DecimalField(max_digits = 10, decimal_places = 1)
    industry_experience = models.DecimalField(max_digits = 10, decimal_places = 1)
    research_guided_ug = models.IntegerField()
    research_guided_pg = models.IntegerField()
    research_guided_phd = models.IntegerField()
    books_published = models.IntegerField()
    national_level_paper = models.IntegerField()
    international_level_paper = models.IntegerField()

class Ombudsman(models.Model):
    application = models.ForeignKey(Application)
    grievance_committee = models.BooleanField()
    ombudsman_appointment = models.BooleanField()

class OmbudsmanDetail(models.Model):
    #application = models.ForeignKey(Application)
    ombudsman = models.ForeignKey(Ombudsman)
    committee_type = models.PositiveSmallIntegerField()
    appointment_order_number = models.CharField(max_length = 255)
    date_of_appointment = models.DateField()
    name_of_member = models.CharField(max_length = 255)
    profession = models.CharField(max_length = 255)
    address = models.TextField()
    associated_with = models.CharField(max_length = 255)
    mobile_number = models.IntegerField()
    email = models.EmailField()
    fax_number = models.IntegerField()
    designation = models.CharField(max_length = 255)
    department = models.CharField(max_length = 255)

class GrantsReceived(models.Model):
    application = models.ForeignKey(Application)
    name_of_grant = models.CharField(max_length = 255)
    sanctioned_year = models.IntegerField()
    sanction_letter_no = models.CharField(max_length = 255)
    sanctioned_date = models.DateField()
    receiving_date = models.DateField()
    conducted_from = models.DateField()
    conducted_upto = models.DateField()
    final_util_certificate = models.BooleanField()
    util_certificate_refno = models.CharField(max_length = 255)
    date_of_submission_final_util_certificate = models.DateField()
    final_settlement_of_grant = models.BooleanField()
    grant_tobe_received = models.DecimalField(max_digits = 11, decimal_places = 2)
    grant_tobe_returned = models.DecimalField(max_digits = 11, decimal_places = 2)
    remarks = models.TextField()

class Ejournal(models.Model):
    application = models.ForeignKey(Application)
    publisher_name = models.CharField(max_length = 255)
    subscription_from = models.DateField()
    subscription_till = models.DateField()
    amount = models.DecimalField(max_digits = 11, decimal_places = 2)

class StudentDetail(models.Model):
    application_year = models.ForeignKey('ApplicationYear')
    title = models.CharField(max_length=10)
    first_name = models.CharField(max_length=200)
    middle_name = models.CharField(max_length=200)
    surname = models.CharField(max_length=200)
    mothers_name = models.CharField(max_length=200)
    fathers_name = models.CharField(max_length=200)
    res_phone = models.IntegerField()
    mobile_number = models.IntegerField()
    gender = models.CharField(max_length=200)
    date_of_birth = models.DateField()
    status = models.CharField(max_length=200)
    program = models.ForeignKey(Program)
    course = models.ForeignKey(Course)
    level = models.ForeignKey(Level)
    date_of_joining_the_institute = models.DateField()
    admitted_to = models.PositiveSmallIntegerField()
    roll_number = models.CharField(max_length=200)
    email_address = models.EmailField(max_length = 200)
    religion = models.CharField(max_length=200)
    caste = models.CharField(max_length=200)
    reserve_category = models.BooleanField()
    is_physically_handicapped = models.BooleanField()
    econ_backward = models.BooleanField()
    home_hostel = models.PositiveSmallIntegerField()
    institute_fees_paid = models.DecimalField(max_digits = 11, decimal_places = 2)
    hostel_fees_month = models.DecimalField(max_digits = 11, decimal_places = 2)
    year1 = models.DecimalField(max_digits = 8, decimal_places = 2)
    year2 = models.DecimalField(max_digits = 8, decimal_places = 2)
    year3 = models.DecimalField(max_digits = 8, decimal_places = 2)
    year4 = models.DecimalField(max_digits = 8, decimal_places = 2)
    year5 = models.DecimalField(max_digits = 8, decimal_places = 2)
    aadhaar_card = models.CharField(max_length=200)
    enrollemnt_id = models.CharField(max_length=200)
    gate_score = models.DecimalField(max_digits = 11, decimal_places = 2)
    gate_exam_number = models.CharField(max_length=200)
    gate_score_year_valid_from = models.DateField()
    gate_score_year_valid_to = models.DateField()

class ApplicationYear(models.Model):
    user = models.ForeignKey(User)
    application = models.ForeignKey(Application)
    institution = models.ForeignKey(InstitutionDetail, null = True)
    organisation = models.ForeignKey(Organisation, null = True)
    contact = models.ForeignKey(ContactDetail, null = True)
    land = models.ForeignKey(LandDetail, null = True)
    building = models.ForeignKey(BuildingDetail, null = True)
    fee_structure = models.ForeignKey(FeeStructure, null = True)
    current_application_id = models.CharField(max_length = 255)
    academic_year = models.IntegerField()
    chapter = models.IntegerField()
    approval_status = models.PositiveSmallIntegerField()
    application_type = models.PositiveSmallIntegerField()
    application_opened = models.DateTimeField(auto_now_add = True)
    application_submitted = models.DateTimeField(auto_now = True) 
    
